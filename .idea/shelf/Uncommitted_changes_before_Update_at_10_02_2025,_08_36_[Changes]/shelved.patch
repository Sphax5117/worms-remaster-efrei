Index: first_test_platform.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\nimport time\nfrom sys import exit\n \ndef testpygames():\n    pygame.init\n\n    #initialization of the screen\n    screen = pygame.display.set_mode((1200, 600))\n    pygame.display.set_caption('Worms.exe')\n\n    #limit the game to 60 fps\n    clock = pygame.time.Clock()\n\n    #structure of the game, simples bridges\n    bridge_surface = pygame.Surface((1500, 10))\n    bridge_surface.fill('Brown')\n\n    #backround surface \n    #backround_image = pygame.image.load('')\n\n    #for the weapons and bullets\n    bullet = pygame.image.load('players.png')\n    #for the scale of the bullet\n    bullet = pygame.transform.scale(bullet, (5,5))\n    #to consider the bullet as a rectangle\n    bullet_rect = bullet.get_rect()\n\n    #players need to have a better well organised folder\n    player1 = pygame.image.load('players.png')\n    player2 = pygame.image.load('players.png')\n    #for the scale of the player\n    player1 = pygame.transform.scale(player1, (20,20))\n    player2 = pygame.transform.scale(player1, (20,20))\n    #con,sider the player as a rectangle for better positioning\n    player1_rect = player1.get_rect(midbottom = (260,500))\n    player2_rect = player2.get_rect(midbottom = (400, 500))\n    #for the gravity of the player\n    player1_gravity = 0\n    player2_gravity = 0\n\n    #management for turns (1 or 2)\n    player_turn = pygame.USEREVENT + 1\n    pygame.time.set_timer(player_turn, 45000)\n    current_player = 1\n\n    bullets = []\n    bullet_gravity = 0.3\n\n    trajectory = []\n    trajectory_show = True\n    trajectory_color = (255,255,255)\n    directionp1 = 1\n    count = 0 \n\n\n    while True:\n\n        #to exit the windows\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                exit()\n            #pour les tours\n            elif event.type == player_turn:\n                if current_player == 1:\n                    current_player = 2\n                    count = 0\n                elif current_player == 2:\n                    current_player = 1\n                    count = 0\n            #pour les tirs\n            elif event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_a :\n                    count += 1\n                    if current_player == 1 and count <= 5:\n                        x = player1_rect.centerx\n                        y = player1_rect.centery\n                        vx, vy = 5*directionp1, -5\n                        bullets.append({\"x\":x, \"y\": y, \"vx\": vx, \"vy\": vy })\n\n                    elif current_player == 2 and count <=  5:\n                        x = player2_rect.centerx\n                        y = player2_rect.centery\n                        vx, vy = 5*directionp2, -5\n                        bullets.append({\"x\":x, \"y\": y, \"vx\": vx, \"vy\": vy })\n                \n                if event.key == pygame.K_t :\n                    trajectory_show = True\n                    if current_player == 1 and count <= 5:\n                        x = player1_rect.centerx\n                        y = player1_rect.centery\n                        vx, vy = 5*directionp1, -5\n\n                    elif current_player == 2 and count <=  5:\n                        x = player2_rect.centerx\n                        y = player2_rect.centery\n                        vx, vy = 5*directionp2, -5\n\n                    #generate the trajectory of the bullet\n                    trajectory.clear()\n                    temp_x, temp_y, temp_vy = x, y ,vy\n\n                    for i in range(50):\n                        temp_x += vx\n                        temp_y += temp_vy\n                        temp_vy += bullet_gravity\n                        if temp_y >= 500:\n                            break\n                        trajectory.append((int(temp_x), int(temp_y)))\n\n                if event.key == pygame.K_h :\n                    trajectory_show = False\n\n           \n\n        #display the backround on the screen\n        screen.fill((0, 0, 0))\n                \n        #display the brige on the screen \n        screen.blit(bridge_surface,(0,500))\n        \n\n        #display the players1 + gravity\n        player1_gravity += 0.5\n        player1_rect.y += player1_gravity\n        if player1_rect.bottom >= 500:\n            player1_rect.bottom = 500\n        if player1_rect.centerx >= 1190:\n            player1_rect.centerx = 1190\n        if player1_rect.centerx <= 10:\n            player1_rect.centerx = 10\n        screen.blit(player1, player1_rect)\n\n        #display the players2 + gravity\n        player2_gravity += 0.5\n        player2_rect.y += player2_gravity\n        if player2_rect.bottom >= 500:\n            player2_rect.bottom = 500\n        if player2_rect.centerx >= 1190:\n            player2_rect.centerx = 1190\n        if player2_rect.centerx <= 10:\n            player2_rect.centerx = 10\n        screen.blit(player2, player2_rect)\n\n        keys = pygame.key.get_pressed()\n\n        #Players 1\n        #pour les mouvements ici droite et gauche ou on prends on compte la collision entre deux joueur\n\n        if current_player == 1:\n            if keys[pygame.K_RIGHT]:\n                player1_rect.x += 2\n                directionp1 = 1\n                \n\n                if player1_rect.colliderect(player2_rect):\n                    player1_rect.x -= 2\n            \n            if keys[pygame.K_LEFT]:\n                player1_rect.x -= 2\n                directionp1 = -1\n\n                if player1_rect.colliderect(player2_rect):\n                    player1_rect.x += 2\n            \n            if keys[pygame.K_UP] and player1_rect.bottom >= 500:\n                player1_gravity = -9\n\n\n\n        elif current_player == 2:\n            if keys[pygame.K_RIGHT]:\n                player2_rect.x += 2\n                directionp2 = 1\n\n                if player2_rect.colliderect(player1_rect):\n                    player2_rect.x -= 2\n            \n            if keys[pygame.K_LEFT]:\n                player2_rect.x -= 2\n                directionp2 = -1\n\n                if player2_rect.colliderect(player1_rect):\n                    player2_rect.x += 2\n            \n            if keys[pygame.K_UP] and player2_rect.bottom >= 500:\n                player2_gravity = -9\n\n        #affiche la trajectoire\n        if trajectory_show:\n            for point in trajectory:\n                pygame.draw.circle(screen, trajectory_color, point, 2)\n            \n\n        # Mise à jour des projectiles + la gravité\n        bullet_remove = []\n        for bullet in bullets:\n            bullet[\"x\"] += bullet[\"vx\"]\n            bullet[\"y\"] += bullet[\"vy\"]\n            bullet[\"vy\"] += bullet_gravity\n            if bullet[\"y\"] >= 500:\n                bullet_remove.append(bullet)\n            else:\n                pygame.draw.circle(screen, (255, 255, 255), (int(bullet[\"x\"]), int(bullet[\"y\"])), 5)\n\n        for bullet in bullet_remove:\n            bullets.remove(bullet)\n\n        #update everything\n        pygame.display.update()\n\n        #limit the game to 60 fps\n        clock.tick(60)\n\n\ntestpygames()
===================================================================
diff --git a/first_test_platform.py b/first_test_platform.py
--- a/first_test_platform.py	(revision 64a5c1c57b6e74bc4104196116e875ddafe7f5ad)
+++ b/first_test_platform.py	(date 1738574843647)
@@ -27,7 +27,6 @@
     bullet_rect = bullet.get_rect()
 
     #players need to have a better well organised folder
-    player1 = pygame.image.load('players.png')
     player2 = pygame.image.load('players.png')
     #for the scale of the player
     player1 = pygame.transform.scale(player1, (20,20))
